#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// production rules
typedef struct{
    char lhs;
    char rhs [20][20];
    int altCount;
} productionRule;

// first and follow sets
typedef struct{
    char nonTerm;
    char set[20];
    int count;
} firstsAndFollows;

// LR(1) Item structure
typedef struct {
    char lhs;
    char rhs[20];
    int dotPosition;
    char lookAhead;
} LRItem;

// State structure
typedef struct {
    LRItem items[100];
    int itemCount;
} State;

// Parsing table entry types
typedef enum {
    ACTION_SHIFT,
    ACTION_REDUCE,
    ACTION_ACCEPT,
    ACTION_ERROR
} ActionType;

// Parsing table entry
typedef struct {
    ActionType type;
    int value;  // state number for shift, production number for reduce
} TableEntry;

// functions
void parsingProductionRules(char *line);
void computeFirst(char symbol);
void addToFirst(char nonTerm, char term);
void computeFollow();
void addToFollow(char nonTerm, char term);
void computeClosure(State *state);
void computeGoto(State *state, char symbol, State *newState);
void buildParsingTable();
void addItem(State *state, char lhs, char *rhs, int dotPos, char lookAhead);
void displayParsingTable(FILE* output);

// number of productions
int count = 0;
// global production rule array
productionRule productions[100];

// for FIRSTS
firstsAndFollows firstSet[100];
int firstCount = 0;

// for FOLLOWS
firstsAndFollows followSet[100];
int followCount = 0;

// Global variables to add:
State states[100];
int stateCount = 0;
TableEntry actionTable[100][100]; // [state][terminal]
int gotoTable[100][100];

// check for terminal
int isTerminal(char ch){
    return !(ch >= 'A' && ch <= 'Z');
}

// get follow index
int getFollowIndex(char nonTerm) {
    for(int i = 0; i < followCount; i++) {
        if(followSet[i].nonTerm == nonTerm) return i;
    }
    return -1;
}

// main function
int main () {
    FILE *input, *output;
    char line[100];

    input = fopen("input.txt", "r");
    output = fopen("output.txt", "w");

    // parse the rules
    while(fgets(line, sizeof(line), input)){
        if(line[0] == '\n') {
            count = count + 1;
            continue;
        }
        parsingProductionRules(line);
    }

    // calculate firts
    for (int i = 0; i < count; i++) {
        computeFirst(productions[i].lhs);
    }

    // print first sets
    fprintf(output, "FIRST sets:\n");
    for(int i = 0; i < firstCount; i++){
        fprintf(output, "FIRST(%c) = { ", firstSet[i].nonTerm);
        for(int j = 0; j < firstSet[i].count; j++){
            fprintf(output, "%c", firstSet[i].set[j]);
            if(j != firstSet[i].count - 1) fprintf(output, ", ");
        }
        fprintf(output, " }\n");
    }


    // initialize follows
    for (int i = 0; i < count; i++) {
        int exists = 0;
        for (int j = 0; j < followCount; j++) {
            if (followSet[j].nonTerm == productions[i].lhs) {
                exists = 1;
                break;
            }
        }
        if (!exists) {
            followSet[followCount].nonTerm = productions[i].lhs;
            followSet[followCount].count = 0;
            followCount++;
        }
    }

    // calculate follow set
    computeFollow();

    // print follows
    fprintf(output, "\nFOLLOW sets:\n");
    for(int i = 0; i < followCount; i++){
        fprintf(output, "FOLLOW(%c) = { ", followSet[i].nonTerm);
        for(int j = 0; j < followSet[i].count; j++){
            fprintf(output, "%c", followSet[i].set[j]);
            if(j != followSet[i].count - 1) fprintf(output, ", ");
        }
        fprintf(output, " }\n");
    }

    // // initialize action table with error
    for(int i = 0; i < 100; i++) {
        for(int j = 0; j < 100; j++) {
            actionTable[i][j].type = ACTION_ERROR;
            gotoTable[i][j] = 0;
        }
    }

    printf("Starting CLR(1) parsing table generation...\n");
    buildParsingTable();

    printf("States generated: %d\n", stateCount);
    printf("Writing parsing table...\n");
    displayParsingTable(output);

    printf("Table generation complete.\n");

    // Also print to console for verification
    printf("\nCLR(1) Parsing Table has been written to output.txt\n");

    fclose(input);
    fclose(output);

    return 0;
}


// adding to the first set
void addToFirst(char nonTerm, char term){
    int found = 0;

    // searching for existing first sets for non terminals
    for(int i = 0; i < firstCount; i++){
        if(firstSet[i].nonTerm == nonTerm){
            found = 1;

            // checking for duplicates
            for(int j = 0; j < firstSet[i].count; j++){
                if(firstSet[i].set[j] == term) return;
            }

            // add new terminal to first set
            firstSet[i].set[firstSet[i].count++] = term;
            return;
        }
    }

    if(!found) {
        firstSet[firstCount].nonTerm = nonTerm;
        firstSet[firstCount].set[0] = term;
        firstSet[firstCount].count = 1;
        firstCount++;
    }
}

// find firsts
void computeFirst(char symbol){
    if(isTerminal(symbol)){
        addToFirst(symbol, symbol);
        return;
    }

    for(int i = 0; i < count; i++){
        if(productions[i].lhs == symbol){
            for(int j = 0; j < productions[i].altCount; j++){
                char *rhs = productions[i].rhs[j];

                // Handle epsilon directly
                if(rhs[0] == 'e'){
                    addToFirst(symbol, 'e');
                    continue;
                }

                // Scan symbols in RHS left to right
                int k;
                for(k = 0; k < strlen(rhs); k++){
                    char curr = rhs[k];

                    if(isTerminal(curr)){
                        addToFirst(symbol, curr);
                        break;
                    } else {
                        computeFirst(curr);

                        // Copy FIRST(curr) into FIRST(symbol), excluding epsilon
                        int hasEpsilon = 0;
                        for(int f = 0; f < firstCount; f++){
                            if(firstSet[f].nonTerm == curr){
                                for(int m = 0; m < firstSet[f].count; m++){
                                    char term = firstSet[f].set[m];
                                    if(term == 'e') hasEpsilon = 1;
                                    else addToFirst(symbol, term);
                                }
                                break;
                            }
                        }

                        if(!hasEpsilon){
                            break; // stop if epsilon not present
                        }
                    }
                }

                // if we reached the end of rhs, and all had epsilon
                if(k == strlen(rhs)){
                    addToFirst(symbol, 'e');
                }
            }
        }
    }
}

// adding to the follow set
void addToFollow(char nonTerm, char term){
    int found = 0;

    for (int i = 0; i < followCount; i++){
        if(followSet[i].nonTerm == nonTerm){
            found = 1;

            for(int j = 0; j < followSet[i].count; j++){
                if(followSet[i].set[j] == term) return;
            }

            followSet[i].set[followSet[i].count++] = term;
            return;
        }
    }

    if(!found) {
        followSet[followCount].nonTerm = nonTerm;
        followSet[followCount].set[0] = term;
        followSet[followCount].count = 1;
        followCount++;
    }
}

// find follow
void computeFollow() {
    addToFollow(productions[0].lhs, '$');

    int changed = 1;

    while(changed){
        changed = 0;

        for(int i = 0; i < count; i++){
            char lhs = productions[i].lhs;

            for(int j = 0; j < productions[i].altCount; j++){
                char *rhs = productions[i].rhs[j];
                int len = strlen(rhs);

                for(int k = 0; k < len; k++){
                    char charFromRHS = rhs[k];
                    if(isTerminal(charFromRHS)) continue;

                    if(k+1 < len) {
                        char next = rhs[k+1];
                        int index = getFollowIndex(charFromRHS);

                        if(isTerminal(next)){
                            if(index != -1 && strchr(followSet[index].set, next) == NULL){
                                addToFollow(charFromRHS, next);
                                changed = 1;
                            }
                        }
                        else{

                            // adding FIRST(next), excludes epsilon (e)
                            for(int f = 0; f < firstCount; f++){
                                if(firstSet[f].nonTerm == next){

                                    for(int m = 0; m < firstSet[f].count; m++){
                                        if(firstSet[f].set[m] != 'e'){
                                            int idx = getFollowIndex(charFromRHS);
                                            int oldCount = (idx != -1) ? followSet[idx].count : 0;
                                            addToFollow(charFromRHS, firstSet[f].set[m]);

                                            if(oldCount != followSet[idx].count) changed = 1;
                                        }
                                    }

                                    int hasEpsilon = 0;

                                    for(int m = 0; m < firstSet[f].count; m++){
                                        if(firstSet[f].set[m] == 'e'){
                                            hasEpsilon = 1;
                                            break;
                                        }
                                    }

                                    if(hasEpsilon){
                                        for(int x = 0; x < followCount; x++){
                                            if(followSet[x].nonTerm == lhs){
                                                for(int y = 0; y < followSet[x].count; y++){
                                                    int idx = getFollowIndex(charFromRHS);
                                                    int oldCount = (idx != -1) ? followSet[idx].count : 0;
                                                    addToFollow(charFromRHS, followSet[x].set[y]);
                                                    if (oldCount != followSet[idx].count) changed = 1;
                                                }
                                                break;
                                            }
                                        }
                                    }

                                    break;

                                }
                            }
                        }
                    }
                    else{
                        for (int x = 0; x < followCount; x++) {
                            if (followSet[x].nonTerm == lhs) {
                                for (int y = 0; y < followSet[x].count; y++) {
                                    int idx = getFollowIndex(charFromRHS);
                                    int oldCount = (idx != -1) ? followSet[idx].count : 0;
                                    addToFollow(charFromRHS, followSet[x].set[y]);
                                    if (oldCount != followSet[idx].count) changed = 1;
                                }
                                break;
                            }
                        }
                    }
                }
            }
        }
    }
}

// parse the prodcution rules
void parsingProductionRules(char *line){
    char lhs, *arrow, *token, *savePtr;

    arrow = strstr(line, "=");
    if(!arrow) return;

    lhs = line[0];
    char *rhs = arrow + 1;

    // removing leading space if there is any
    while (*rhs == ' ') rhs++;

    // removing new lines
    rhs[strcspn(rhs, "\n")] = '\0';

    productionRule *rule = &productions[count++];
    rule->lhs = lhs;
    rule->altCount = 0;

    // split the right side if "|" found
    token = strtok(rhs, "|");
    while(token) {
        // removing leading spaces
        while (*token == ' ') {
            token++;
        }

        strcpy(rule->rhs[rule->altCount++], token);
        token = strtok(NULL, "|");        
    }
}


// Add these functions before buildParsingTable()
void addItem(State* state, char lhs, char* rhs, int dotPos, char lookAhead) {
    // Validate inputs before adding
    if (lhs == 0 || rhs == NULL || rhs[0] == 0) {
        return;  // Skip empty or invalid items
    }

    // Check for duplicates
    for (int i = 0; i < state->itemCount; i++) {
        if (state->items[i].lhs == lhs && 
            strcmp(state->items[i].rhs, rhs) == 0 && 
            state->items[i].dotPosition == dotPos && 
            state->items[i].lookAhead == lookAhead) {
            return;  // Skip duplicate items
        }
    }

    // Add the valid item
    LRItem* item = &state->items[state->itemCount];
    item->lhs = lhs;
    strcpy(item->rhs, rhs);
    item->dotPosition = dotPos;
    item->lookAhead = lookAhead;
    state->itemCount++;
}

void computeGoto(State* state, char symbol, State* newState) {
    newState->itemCount = 0;
    
    // Find items where dot is before symbol
    for (int i = 0; i < state->itemCount; i++) {
        LRItem* item = &state->items[i];
        if (item->rhs[item->dotPosition] == symbol) {
            // Add item with dot moved one position right
            addItem(newState, item->lhs, item->rhs, 
                   item->dotPosition + 1, item->lookAhead);
        }
    }
}

void computeClosure(State* state) {
    printf("Starting closure computation\n");
    fflush(stdout);
    
    int changed = 1;
    int iteration = 0;
    while (changed && iteration < 100) {
        printf("Iteration %d, items: %d\n", iteration, state->itemCount);
        fflush(stdout);
        
        changed = 0;
        int startCount = state->itemCount;
        
        for (int i = 0; i < startCount; i++) {
            LRItem* item = &state->items[i];
            char nextSymbol = item->rhs[item->dotPosition];
            
            if (!nextSymbol || isTerminal(nextSymbol)) {
                continue;
            }
            
            // For each production with nextSymbol as LHS
            for (int j = 0; j < count; j++) {
                if (productions[j].lhs == nextSymbol) {
                    for (int k = 0; k < productions[j].altCount; k++) {
                        char* beta = &item->rhs[item->dotPosition + 1];
                        char lookAhead = item->lookAhead;
                        
                        if (strlen(beta) > 0) {
                            // Add item with FIRST(beta) as lookahead
                            for (int f = 0; f < firstCount; f++) {
                                if (firstSet[f].nonTerm == beta[0]) {
                                    for (int m = 0; m < firstSet[f].count; m++) {
                                        if (firstSet[f].set[m] != 'e') {
                                            int oldCount = state->itemCount;
                                            addItem(state, productions[j].lhs, 
                                                   productions[j].rhs[k], 0, 
                                                   firstSet[f].set[m]);
                                            if (state->itemCount > oldCount) {
                                                changed = 1;
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            // Use original lookahead
                            int oldCount = state->itemCount;
                            addItem(state, productions[j].lhs, 
                                   productions[j].rhs[k], 0, lookAhead);
                            if (state->itemCount > oldCount) {
                                changed = 1;
                            }
                        }
                    }
                }
            }
        }
        iteration++;
    }
}

// Helper function to compare states (add before buildParsingTable)
int areStatesEqual(State* s1, State* s2) {
    if (s1->itemCount != s2->itemCount) return 0;
    
    for (int i = 0; i < s1->itemCount; i++) {
        int found = 0;
        for (int j = 0; j < s2->itemCount; j++) {
            if (s1->items[i].lhs == s2->items[j].lhs &&
                strcmp(s1->items[i].rhs, s2->items[j].rhs) == 0 &&
                s1->items[i].dotPosition == s2->items[j].dotPosition &&
                s1->items[i].lookAhead == s2->items[j].lookAhead) {
                found = 1;
                break;
            }
        }
        if (!found) return 0;
    }
    return 1;
}


void buildParsingTable() {
    printf("Creating initial state...\n");
    fflush(stdout);

    printf("First production: %c -> %s\n", productions[0].lhs, productions[0].rhs[0]);
    fflush(stdout);

    // Initialize first state with initial item
    State* initialState = &states[stateCount++];
    addItem(initialState, productions[0].lhs, productions[0].rhs[0], 0, '$');

    printf("Initial state created with %d items\n", initialState->itemCount);
    printf("Processing states...\n");
    fflush(stdout);

    printf("Computing closure for initial state...\n");
    fflush(stdout);
    computeClosure(initialState);

    printf("Closure computed. State has %d items:\n", initialState->itemCount);
    for(int i = 0; i < initialState->itemCount; i++) {
        printf("Item %d: %c -> %s, dot at %d, LA: %c\n",
               i, initialState->items[i].lhs, initialState->items[i].rhs,
               initialState->items[i].dotPosition, initialState->items[i].lookAhead);
    }
    fflush(stdout);

    

    // Process all states until no new states can be generated
    int i = 0;
    while(i < stateCount) {
        State* currentState = &states[i];
        
        // For each symbol (terminal and non-terminal)
         for(char symbol = 'a'; symbol <= 'z'; symbol++) {
            State newState;
            computeGoto(currentState, symbol, &newState);
            
            if(newState.itemCount > 0) {
                computeClosure(&newState);  // Compute closure for the new state
                printf("Generated new state on symbol %c with %d items\n", 
                       symbol, newState.itemCount);
                fflush(stdout);
                
                // Check if this state already exists
                int existingState = -1;
                for(int j = 0; j < stateCount; j++) {
                    if(areStatesEqual(&states[j], &newState)) {
                        existingState = j;
                        break;
                    }
                }
                
                if(existingState == -1) {
                    // Add new state
                    states[stateCount] = newState;
                    existingState = stateCount++;
                    printf("Added as new state %d\n", existingState);
                    fflush(stdout);
                }
                
                // Update parsing table
                actionTable[i][symbol].type = ACTION_SHIFT;
                actionTable[i][symbol].value = existingState;
            }
        }

        for(char symbol = 'A'; symbol <= 'Z'; symbol++) {
            State newState;
            computeGoto(currentState, symbol, &newState);
            
            if(newState.itemCount > 0) {
                computeClosure(&newState);
                
                int existingState = -1;
                for(int j = 0; j < stateCount; j++) {
                    if(areStatesEqual(&states[j], &newState)) {
                        existingState = j;
                        break;
                    }
                }
                
                if(existingState == -1) {
                    states[stateCount] = newState;
                    existingState = stateCount++;
                }
                
                gotoTable[i][symbol - 'A'] = existingState;
            }
        }
        
        // Add reduce actions
        for(int j = 0; j < currentState->itemCount; j++) {
            LRItem* item = &currentState->items[j];
            if(item->rhs[item->dotPosition] == '\0') {
                // Find production number
                int prodNum = 0;
                for(int k = 0; k < count; k++) {
                    if(productions[k].lhs == item->lhs) {
                        for(int m = 0; m < productions[k].altCount; m++) {
                            if(strcmp(productions[k].rhs[m], item->rhs) == 0) {
                                actionTable[i][item->lookAhead].type = ACTION_REDUCE;
                                actionTable[i][item->lookAhead].value = prodNum;
                                break;
                            }
                            prodNum++;
                        }
                    }
                }
            }
        }

        if(i == 0) {
            actionTable[i]['$'].type = ACTION_ACCEPT;
            actionTable[i]['$'].value = 0;
        }
        i++;
    }
}


void displayParsingTable(FILE* output) {
    fprintf(output, "\nCLR(1) Parsing Table:\n\n");
    
    // Print header with all terminals
    fprintf(output, "State |");
    // Print terminal symbols in header
    for(char c = 0; c < 128; c++) {
        if(isTerminal(c) && c >= 33 && c <= 126) { // printable characters
            fprintf(output, "  %c  |", c);
        }
    }
    fprintf(output, "   $  |"); // Add $ symbol
    
    // Print non-terminals in header
    for(char c = 'A'; c <= 'Z'; c++) {
        fprintf(output, "  %c  |", c);
    }
    fprintf(output, "\n");
    
    // Print separator line
    for(int i = 0; i < 150; i++) fprintf(output, "-");
    fprintf(output, "\n");
    
    // For each state
    for(int i = 0; i < stateCount; i++) {
        fprintf(output, "  %2d  |", i);
        
        // Print Action part for each terminal
        for(char c = 0; c < 128; c++) {
            if(isTerminal(c) && c >= 33 && c <= 126) {
                if(actionTable[i][c].type != ACTION_ERROR) {
                    switch(actionTable[i][c].type) {
                        case ACTION_SHIFT:
                            fprintf(output, " s%-2d |", actionTable[i][c].value);
                            break;
                        case ACTION_REDUCE:
                            fprintf(output, " r%-2d |", actionTable[i][c].value);
                            break;
                        case ACTION_ACCEPT:
                            fprintf(output, " acc |");
                            break;
                    }
                } else {
                    fprintf(output, "     |");
                }
            }
        }
        
        // Print action for $ symbol
        if(actionTable[i]['$'].type != ACTION_ERROR) {
            switch(actionTable[i]['$'].type) {
                case ACTION_SHIFT:
                    fprintf(output, " s%-2d |", actionTable[i]['$'].value);
                    break;
                case ACTION_REDUCE:
                    fprintf(output, " r%-2d |", actionTable[i]['$'].value);
                    break;
                case ACTION_ACCEPT:
                    fprintf(output, " acc |");
                    break;
            }
        } else {
            fprintf(output, "     |");
        }
        
        // Print Goto part
        for(char c = 'A'; c <= 'Z'; c++) {
            if(gotoTable[i][c - 'A'] != 0) {
                fprintf(output, " %-3d |", gotoTable[i][c - 'A']);
            } else {
                fprintf(output, "     |");
            }
        }
        
        fprintf(output, "\n");
    }
}


///debug
void displayParsingTable(FILE* output) {
    printf("\nCLR(1) Parsing Table:\n\n");
    
    printf("state-count: %d\n", stateCount);

    int actionTableLen = sizeof(actionTable) / sizeof(actionTable[0]);
    printf("action table size: %d\n", actionTableLen);

    int breaking = 0;
    for(int i = 0; i < 100; i++) {
        if(breaking) break;
        printf("state[%d]: \n ------------------------------\n", i);
        for(int j = 0; j < 2; j++) {
            if(states[i].items[j].lhs == NULL) {
                breaking = 1;
                break;
            }

            printf("lhs: %c, rhs: %s, dot: %d, LA: %c  \n", states[i].items[j].lhs, states[i].items[j].rhs, states[i].items[j].dotPosition, states[i].items[j].lookAhead);
        }
    }
}